name: Main

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  attestations: write
  security-events: write
  actions: read

jobs:
  validate:
    uses: ./.github/workflows/reusable-validate.yml

  version-and-release:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Version packages
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node .github/scripts/version-and-release.js

      - name: Build
        if: steps.version.outputs.changed == 'true'
        run: pnpm build

      - name: Generate SBOM
        if: steps.version.outputs.changed == 'true'
        run: pnpm sbom

      - name: Create release artifacts
        if: steps.version.outputs.changed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          tar -czf dist-${VERSION}.tar.gz dist/
          zip -r dist-${VERSION}.zip dist/

      - name: Commit version changes
        if: steps.version.outputs.changed == 'true'
        run: |
          git config --local user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          git add package.json CHANGELOG.md .changeset
          git commit -m "chore(release): v${{ steps.version.outputs.version }} [skip actions]"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin main --follow-tags

      - name: Extract release notes
        if: steps.version.outputs.changed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          awk -v version="## $VERSION" '
            $0 ~ version { flag=1; next }
            /^## [0-9]/ && flag { exit }
            flag { print }
          ' CHANGELOG.md > release-notes.md

          if [ ! -s release-notes.md ]; then
            echo "Release v$VERSION" > release-notes.md
          fi

      - name: Create GitHub Release
        if: steps.version.outputs.changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          make_latest: true
          files: |
            sbom.cdx.json
            dist-${{ steps.version.outputs.version }}.tar.gz
            dist-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Generate attestations
        if: steps.version.outputs.changed == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/**/*.js
            sbom.cdx.json
            dist-*.tar.gz
            dist-*.zip

      - name: Set release output
        id: release
        if: steps.version.outputs.changed == 'true'
        run: |
          echo "released=true" >> $GITHUB_OUTPUT
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "âœ… Released version ${{ steps.version.outputs.version }}"
