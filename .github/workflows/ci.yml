name: CI Validation

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        type: string
        default: '22'
      pnpm-version:
        description: 'pnpm version to use'
        type: string
        default: '10.0.0'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Validate required inputs
        run: |
          if [ -z "${{ inputs.node-version }}" ]; then
            echo "❌ Error: node-version input is required"
            exit 1
          fi
          if [ -z "${{ inputs.pnpm-version }}" ]; then
            echo "❌ Error: pnpm-version input is required"
            exit 1
          fi
          echo "✅ All required inputs are present"
          echo "Node version: ${{ inputs.node-version }}"
          echo "pnpm version: ${{ inputs.pnpm-version }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ inputs.pnpm-version }}
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level critical

      - name: Type checking
        run: pnpm typecheck

      - name: Linting
        run: pnpm lint

      - name: Format checking
        run: pnpm format

      - name: Test with coverage
        run: pnpm test:coverage

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Generate SBOM
        run: pnpm sbom

      - name: Run OSV Scanner
        run: |
          # Install OSV Scanner
          npm install -g @google/osv-scanner

          # Run OSV Scanner on the project with multiple output formats
          osv-scanner --format table . | tee osv-report.txt
          osv-scanner --format json . > osv-report.json

      - name: Upload SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.cdx.json
          retention-days: 7

      - name: Upload OSV Scanner Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: osv-reports-${{ github.sha }}
          path: |
            osv-report.txt
            osv-report.json
          retention-days: 7

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage/
          retention-days: 7
