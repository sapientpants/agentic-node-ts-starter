name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish'
        required: true
        type: string

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ inputs.tag }}"
          fi
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Publishing version: $VERSION"

  build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.tag }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.prepare.outputs.version }}
          path: dist/
          retention-days: 1

  publish-registries:
    needs: [prepare, build]
    strategy:
      fail-fast: false
      matrix:
        include:
          - registry: npm
            enabled: ${{ vars.ENABLE_NPM_RELEASE == 'true' }}
            url: https://registry.npmjs.org
            scope: ''
          - registry: github
            enabled: ${{ vars.ENABLE_GITHUB_PACKAGES == 'true' }}
            url: https://npm.pkg.github.com
            scope: '@${{ github.repository_owner }}'
    runs-on: ubuntu-latest
    if: matrix.enabled
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.tag }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.prepare.outputs.version }}
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: ${{ matrix.url }}

      - name: Configure package
        run: |
          if [ "${{ matrix.registry }}" == "github" ] && [ -n "${{ matrix.scope }}" ]; then
            # Update package name to include scope for GitHub Packages
            node -e "
              const fs = require('fs');
              const pkg = require('./package.json');
              if (!pkg.name.startsWith('${{ matrix.scope }}')) {
                pkg.name = '${{ matrix.scope }}/' + pkg.name;
              }
              delete pkg.private;
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            "
          else
            # Remove private flag for npm
            node -e "
              const fs = require('fs');
              const pkg = require('./package.json');
              delete pkg.private;
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            "
          fi

      - name: Check credentials
        id: check-creds
        run: |
          if [ "${{ matrix.registry }}" == "npm" ]; then
            if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
              echo "has_token=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è NPM_TOKEN not configured, skipping"
              echo "has_token=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_token=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to ${{ matrix.registry }}
        if: steps.check-creds.outputs.has_token == 'true'
        run: |
          npm publish --provenance --access public
          echo "‚úÖ Published to ${{ matrix.registry }}: ${{ needs.prepare.outputs.version }}"
        env:
          NODE_AUTH_TOKEN: ${{ matrix.registry == 'npm' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}

  docker:
    needs: [prepare, build]
    if: vars.ENABLE_DOCKER_RELEASE == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.tag }}

      - name: Check Docker credentials
        id: check-docker
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker Hub credentials configured"
          else
            echo "has_credentials=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Docker Hub credentials not configured"
          fi

      - name: Set up QEMU
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.prepare.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest

      - name: Build and push
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}

  notify:
    needs: [prepare, publish-registries, docker]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check Slack webhook
        id: check-slack
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "has_webhook=true" >> $GITHUB_OUTPUT
          else
            echo "has_webhook=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: steps.check-slack.outputs.has_webhook == 'true'
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "Release published: ${{ needs.prepare.outputs.version }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üöÄ Release Published: ${{ needs.prepare.outputs.version }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Version:*\n${{ needs.prepare.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ job.status == 'success' && '‚úÖ Success' || '‚ö†Ô∏è Partial' }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
