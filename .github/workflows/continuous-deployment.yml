name: Continuous Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  attestations: write
  id-token: write
  security-events: write
  pull-requests: read

jobs:
  # Phase 1: Build and Test (always runs)
  build:
    name: Build
    uses: ./.github/workflows/reusable-build.yml
    permissions:
      contents: read
      id-token: write
      attestations: write

  # Phase 2: Security Scans (parallel with build)
  security-scans:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run security scans
        run: echo "Security scans would run here (CodeQL, OSV, etc.)"

  # Phase 3: Changeset Validation (PRs only)
  validate-changeset:
    name: Validate Changeset
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changeset
        run: |
          if pnpm changeset status --since=origin/main 2>&1 | grep -q "No changesets present"; then
            echo "❌ Error: This PR does not include a changeset."
            echo ""
            echo "Every PR must include a changeset to document the changes."
            echo ""
            echo "To add a changeset:"
            echo "  - For user-facing changes: run 'pnpm changeset'"
            echo "  - For internal changes (CI, tests, refactoring): run 'pnpm changeset --empty'"
            echo ""
            echo "Learn more about changesets in CONTRIBUTING.md"
            exit 1
          else
            echo "✅ Changeset found"
          fi

  # Phase 4: Version Management (main branch only)
  version-and-release:
    name: Version and Release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, security-scans]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      issues: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Use PAT if available for creating PRs that trigger workflows
          token: ${{ secrets.CHANGESETS_PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # Download artifacts from build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-id }}
          path: artifacts/

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.sbom-artifact-id }}
          path: artifacts/

      # Create Release PR (will trigger workflows if PAT is used)
      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm changeset version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          createGithubReleases: false
        env:
          # Use PAT if available to ensure PRs trigger workflows
          GITHUB_TOKEN: ${{ secrets.CHANGESETS_PAT || secrets.GITHUB_TOKEN }}

      # Check for version changes and create release
      - name: Check for Version Changes
        id: version_check
        run: |
          if git log -1 --pretty=%B | grep -q "chore: version packages"; then
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version change detected: v$VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

      - name: Create Git Tag
        if: steps.version_check.outputs.changed == 'true'
        id: create_tag
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      # Extract CHANGELOG content for release
      - name: Extract CHANGELOG Content
        if: steps.version_check.outputs.changed == 'true'
        id: changelog
        run: |
          VERSION=${{ steps.version_check.outputs.version }}

          CHANGELOG_CONTENT=$(awk -v ver="## $VERSION" '
            BEGIN { found = 0 }
            $0 ~ ver { found = 1; next }
            found && /^## v?[0-9]+\.[0-9]+\.[0-9]+([\-+][0-9A-Za-z\.-]+)?/ { exit }
            found { print }
          ' CHANGELOG.md)

          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="No changelog entry found for version $VERSION"
          fi

          # Create release body with artifact metadata
          cat > release_body.md << EOF
          ## Release v$VERSION

          $CHANGELOG_CONTENT

          ### Build Information
          - **Build Artifact ID**: ${{ needs.build.outputs.artifact-id }}
          - **SBOM Artifact ID**: ${{ needs.build.outputs.sbom-artifact-id }}
          - **Build Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Artifacts
          - 📦 SBOM (CycloneDX format) attached below
          - ✅ Build provenance attestation available
          - ✅ SBOM attestation available

          ### Distribution
          This release will be automatically distributed to configured channels.

          ---
          See the [full CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for all releases.
          EOF

      # Create GitHub Release with artifact metadata
      - name: Create GitHub Release
        if: steps.version_check.outputs.changed == 'true'
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.create_tag.outputs.tag }}
          name: Release ${{ steps.create_tag.outputs.tag }}
          bodyFile: release_body.md
          artifacts: artifacts/sbom.cdx.json
          makeLatest: true

      # Set outputs for downstream jobs
      - name: Set release outputs
        id: set_outputs
        if: steps.version_check.outputs.changed == 'true'
        run: |
          echo "released=true" >> $GITHUB_OUTPUT
          echo "version=${{ steps.version_check.outputs.version }}" >> $GITHUB_OUTPUT
          echo "tag=${{ steps.create_tag.outputs.tag }}" >> $GITHUB_OUTPUT

  # Phase 5: Deploy on Release (triggered by release event or after version-and-release)
  deploy:
    name: Deploy ${{ matrix.environment }}
    if: |
      github.event_name == 'release' || 
      (needs.version-and-release.outputs.released == 'true' && github.ref == 'refs/heads/main')
    needs: [build, version-and-release]
    strategy:
      fail-fast: false
      matrix:
        environment: [npm, docker, docs]
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      artifact-id: ${{ needs.build.outputs.artifact-id }}
      sbom-artifact-id: ${{ needs.build.outputs.sbom-artifact-id }}
      version: ${{ needs.build.outputs.version || needs.version-and-release.outputs.version }}
      environment: ${{ matrix.environment }}
    secrets: inherit
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write
      pages: write
