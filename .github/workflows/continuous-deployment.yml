name: Continuous Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  attestations: write
  id-token: write
  pull-requests: read

jobs:
  # Build, test, and validate
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run all checks
      - name: Audit dependencies
        run: pnpm audit --audit-level critical

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format

      - name: Test with coverage
        run: pnpm test:coverage

      # Build and generate artifacts (only on main branch)
      - name: Build
        if: github.ref == 'refs/heads/main'
        run: pnpm build

      - name: Generate SBOM
        if: github.ref == 'refs/heads/main'
        run: pnpm sbom

      # Get version for later use
      - name: Get package version
        id: package
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Upload artifacts for deployment (simplified naming)
      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            dist/
            package.json
            pnpm-lock.yaml
          retention-days: 30
          if-no-files-found: error

      - name: Upload SBOM
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.cdx.json
          retention-days: 30

  # Validate changesets on PRs
  validate-changeset:
    name: Validate Changeset
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changeset
        run: |
          if pnpm changeset status --since=origin/main 2>&1 | grep -q "No changesets present"; then
            echo "❌ Error: This PR does not include a changeset."
            echo ""
            echo "Every PR must include a changeset to document the changes."
            echo ""
            echo "To add a changeset:"
            echo "  - For user-facing changes: run 'pnpm changeset'"
            echo "  - For internal changes (CI, tests, refactoring): run 'pnpm changeset --empty'"
            echo ""
            echo "Learn more about changesets in CONTRIBUTING.md"
            exit 1
          else
            echo "✅ Changeset found"
          fi

  # Version and release on main branch
  version-and-release:
    name: Version and Release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      issues: write
    outputs:
      released: ${{ steps.changesets.outputs.published }}
      version: ${{ steps.changesets.outputs.publishedPackages && fromJSON(steps.changesets.outputs.publishedPackages)[0].version || '' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Use PAT if available for creating PRs that trigger workflows
          token: ${{ secrets.CHANGESETS_PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: .

      # Create Release PR (changesets will handle releases)
      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm changeset version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          createGithubReleases: true
        env:
          # Use PAT if available to ensure PRs trigger workflows
          GITHUB_TOKEN: ${{ secrets.CHANGESETS_PAT || secrets.GITHUB_TOKEN }}

  # Deploy NPM when a release is created
  deploy-npm:
    name: Deploy to NPM
    if: needs.version-and-release.outputs.released == 'true'
    needs: [version-and-release]
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      version: ${{ needs.version-and-release.outputs.version }}
      environment: npm
    secrets: inherit
    permissions:
      contents: read
      id-token: write

  # Deploy Docker when enabled
  deploy-docker:
    name: Deploy to Docker
    if: needs.version-and-release.outputs.released == 'true' && vars.ENABLE_DOCKER_RELEASE == 'true'
    needs: [version-and-release]
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      version: ${{ needs.version-and-release.outputs.version }}
      environment: docker
    secrets: inherit
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write

  # Deploy Docs when enabled
  deploy-docs:
    name: Deploy Documentation
    if: needs.version-and-release.outputs.released == 'true' && vars.ENABLE_DOCS_RELEASE == 'true'
    needs: [version-and-release]
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      version: ${{ needs.version-and-release.outputs.version }}
      environment: docs
    secrets: inherit
    permissions:
      contents: read
      pages: write
      id-token: write
