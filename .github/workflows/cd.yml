name: CD Release

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        type: string
        default: '22'
      pnpm-version:
        description: 'pnpm version to use'
        type: string
        default: '10.0.0'
    outputs:
      released:
        description: 'Whether a release was created'
        value: ${{ jobs.cd.outputs.released }}
      version:
        description: 'The version that was released'
        value: ${{ jobs.cd.outputs.version }}
    secrets:
      github-token:
        description: 'GitHub token for releasing'
        required: true

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  cd:
    name: CD
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Validate required inputs
        run: |
          if [ -z "${{ inputs.node-version }}" ]; then
            echo "❌ Error: node-version input is required"
            exit 1
          fi
          if [ -z "${{ inputs.pnpm-version }}" ]; then
            echo "❌ Error: pnpm-version input is required"
            exit 1
          fi
          if [ -z "${{ secrets.github-token }}" ]; then
            echo "❌ Error: github-token secret is required"
            exit 1
          fi
          echo "✅ All required inputs are present"
          echo "Node version: ${{ inputs.node-version }}"
          echo "pnpm version: ${{ inputs.pnpm-version }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ inputs.pnpm-version }}
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check or generate changeset
        id: check-changeset
        run: |
          # Check for existing changesets
          if [ -d ".changeset" ] && ls .changeset/*.md 2>/dev/null | grep -v README.md > /dev/null; then
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            echo "📦 Found existing changeset"
          else
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            echo "📝 No changeset found, will check commits"
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMIT_RANGE="HEAD"
            else
              COMMIT_RANGE="$LAST_TAG..HEAD"
            fi
            
            # Check if there are any feat/fix commits
            if git log $COMMIT_RANGE --pretty=format:"%s" | grep -E "^(feat|fix|perf|refactor)(\(.+\))?:" > /dev/null; then
              echo "🎯 Found conventional commits, generating changeset"
              node scripts/generate-changeset.js
              echo "generated_changeset=true" >> $GITHUB_OUTPUT
            else
              echo "⏭️ No releasable commits found"
              echo "skip_release=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Version packages
        if: steps.check-changeset.outputs.skip_release != 'true'
        run: |
          # Get current version before changes
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Apply changesets
          pnpm changeset version

          # Get new version after changes
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_ENV
            echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "version_changed=false" >> $GITHUB_ENV
          fi

      - name: Build
        if: env.version_changed == 'true'
        run: pnpm build

      - name: Generate SBOM
        if: env.version_changed == 'true'
        run: pnpm sbom

      - name: Create build artifacts
        if: env.version_changed == 'true'
        run: |
          # Create tarball of dist folder
          tar -czf dist-${{ env.new_version }}.tar.gz dist/

          # Create zip of dist folder
          zip -r dist-${{ env.new_version }}.zip dist/

      - name: Commit and push
        if: env.version_changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(release): v${{ env.new_version }}

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          git tag -a "v${{ env.new_version }}" -m "Release v${{ env.new_version }}"
          git push origin main --follow-tags

      - name: Mark as released
        id: release
        if: env.version_changed == 'true'
        run: echo "released=true" >> $GITHUB_OUTPUT

      - name: Get version
        id: get-version
        if: env.version_changed == 'true'
        run: |
          echo "version=${{ env.new_version }}" >> $GITHUB_OUTPUT
          echo "📦 Released version: ${{ env.new_version }}"

      - name: Extract release notes
        if: env.version_changed == 'true'
        run: |
          # Extract changelog for this version
          awk -v version="## ${{ env.new_version }}" '
            $0 ~ version { flag=1; next }
            /^## [0-9]/ && flag { exit }
            flag { print }
          ' CHANGELOG.md > release-notes.md

      - name: Create GitHub Release
        if: env.version_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.new_version }}
          name: v${{ env.new_version }}
          body_path: release-notes.md
          files: |
            sbom.cdx.json
            dist-${{ env.new_version }}.tar.gz
            dist-${{ env.new_version }}.zip
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Generate attestations
        if: env.version_changed == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/**/*.js
            sbom.cdx.json
            dist-*.tar.gz
            dist-*.zip
