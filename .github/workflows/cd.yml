name: CD Release

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        type: string
        default: '22'
      pnpm-version:
        description: 'pnpm version to use'
        type: string
        default: '10.0.0'
    outputs:
      released:
        description: 'Whether a release was created'
        value: ${{ jobs.cd.outputs.released }}
      version:
        description: 'The version that was released'
        value: ${{ jobs.cd.outputs.version }}
    secrets:
      github-token:
        description: 'GitHub token for releasing'
        required: true

permissions:
  contents: write
  id-token: write
  attestations: write
  pull-requests: write
  issues: write

jobs:
  cd:
    name: CD
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.changesets.outputs.published }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Validate required inputs
        run: |
          if [ -z "${{ inputs.node-version }}" ]; then
            echo "❌ Error: node-version input is required"
            exit 1
          fi
          if [ -z "${{ inputs.pnpm-version }}" ]; then
            echo "❌ Error: pnpm-version input is required"
            exit 1
          fi
          if [ -z "${{ secrets.github-token }}" ]; then
            echo "❌ Error: github-token secret is required"
            exit 1
          fi
          echo "✅ All required inputs are present"
          echo "Node version: ${{ inputs.node-version }}"
          echo "pnpm version: ${{ inputs.pnpm-version }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ inputs.pnpm-version }}
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check or generate changeset
        id: check-changeset
        run: |
          # Check for existing changesets
          if [ -d ".changeset" ] && ls .changeset/*.md 2>/dev/null | grep -v README.md > /dev/null; then
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            echo "📦 Found existing changeset"
          else
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            echo "📝 No changeset found, will check commits"
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMIT_RANGE="HEAD"
            else
              COMMIT_RANGE="$LAST_TAG..HEAD"
            fi
            
            # Check if there are any feat/fix commits
            if git log $COMMIT_RANGE --pretty=format:"%s" | grep -E "^(feat|fix|perf|refactor)(\(.+\))?:" > /dev/null; then
              echo "🎯 Found conventional commits, generating changeset"
              node scripts/generate-changeset.js
              echo "generated_changeset=true" >> $GITHUB_OUTPUT
            else
              echo "⏭️ No releasable commits found"
              echo "skip_release=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create Release
        id: changesets
        if: steps.check-changeset.outputs.skip_release != 'true'
        uses: changesets/action@v1
        with:
          publish: pnpm run release:tag
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Get version
        id: get-version
        if: steps.changesets.outputs.published == 'true'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Released version: $VERSION"

      - name: Build
        if: steps.changesets.outputs.published == 'true'
        run: pnpm build

      - name: Generate SBOM
        if: steps.changesets.outputs.published == 'true'
        run: pnpm sbom

      - name: Create build artifacts
        if: steps.changesets.outputs.published == 'true'
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          # Create tarball of dist folder
          tar -czf dist-${VERSION}.tar.gz dist/

          # Create zip of dist folder
          zip -r dist-${VERSION}.zip dist/

      - name: Upload artifacts to release
        if: steps.changesets.outputs.published == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          files: |
            sbom.cdx.json
            dist-${{ steps.get-version.outputs.version }}.tar.gz
            dist-${{ steps.get-version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Generate attestations
        if: steps.changesets.outputs.published == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/**/*.js
            sbom.cdx.json
            dist-*.tar.gz
            dist-*.zip
