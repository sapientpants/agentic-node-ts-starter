name: Release Distribution

# Triggered when a GitHub release is published (created by ci-cd.yml)
on:
  release:
    types: [published]

jobs:
  # Download and prepare release artifacts
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Extract version info
        id: version
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (tag: $TAG)"

      - name: Download release assets
        run: |
          mkdir -p release-assets

          # Download SBOM if it exists
          gh release download "${{ github.event.release.tag_name }}" \
            --pattern "*.cdx.json" \
            --dir release-assets \
            --clobber || echo "No SBOM found in release"

          # List downloaded assets
          echo "Downloaded release assets:"
          ls -la release-assets/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets for other jobs
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/
          retention-days: 1

  # Publish to npm registry
  npm-distribution:
    name: NPM Distribution
    runs-on: ubuntu-latest
    needs: prepare-release
    if: secrets.NPM_TOKEN != ''
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js for npm
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Check package configuration
        id: check_config
        run: |
          IS_PRIVATE=$(node -p "require('./package.json').private || false")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "is_private=$IS_PRIVATE" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          if [ "$IS_PRIVATE" = "true" ]; then
            echo "⚠️ Package is marked as private. Will attempt to publish anyway."
          fi

          echo "📦 Package: $PACKAGE_NAME@$PACKAGE_VERSION"

      - name: Configure package for publishing
        if: steps.check_config.outputs.is_private == 'true'
        run: |
          # Remove private flag for publishing
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            delete pkg.private;
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish to npm with provenance
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          pnpm publish --provenance --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm publication
        run: |
          echo "Waiting for npm to propagate..."
          sleep 10
          npm view ${{ steps.check_config.outputs.package_name }}@${{ steps.check_config.outputs.package_version }}
          echo "✅ Successfully published to npm"

  # Build and push Docker images
  docker-distribution:
    name: Docker Distribution
    runs-on: ubuntu-latest
    needs: prepare-release
    if: vars.ENABLE_DOCKER_RELEASE == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: secrets.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, github.event.repository.name) || '' }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.prepare-release.outputs.version }}
            type=raw,value=${{ needs.prepare-release.outputs.tag }}
            type=semver,pattern={{version}},value=${{ needs.prepare-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.prepare-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_DATE=${{ github.event.release.created_at }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM attestation for container
        if: hashFiles('release-assets/sbom.cdx.json') != ''
        uses: actions/attest-sbom@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: release-assets/sbom.cdx.json

      - name: Generate build provenance attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}

  # Deploy documentation to GitHub Pages
  docs-distribution:
    name: Documentation Distribution
    runs-on: ubuntu-latest
    needs: prepare-release
    if: vars.ENABLE_DOCS_RELEASE == 'true'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package first
        run: pnpm build

      - name: Build documentation
        run: |
          # Check if there's a docs:build script
          if npm run | grep -q "docs:build"; then
            echo "Running docs:build script"
            pnpm run docs:build
          else
            echo "No docs:build script found, generating with TypeDoc"
            # Generate API documentation with TypeDoc
            pnpm dlx typedoc --out docs/api src/index.ts \
              --name "${{ github.event.repository.name }}" \
              --includeVersion \
              --gitRevision ${{ github.event.release.tag_name }}
          fi

          # Create index.html if it doesn't exist
          if [ ! -f docs/index.html ]; then
            echo "Creating default index.html"
            cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>${{ github.event.repository.name }} Documentation</title>
              <meta http-equiv="refresh" content="0; url=./api/index.html">
          </head>
          <body>
              <p>Redirecting to <a href="./api/index.html">API Documentation</a>...</p>
          </body>
          </html>
          EOF
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create additional release artifacts
  release-artifacts:
    name: Additional Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare-release
    permissions:
      contents: write
    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build distribution
        run: pnpm build

      - name: Download existing release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets/
        continue-on-error: true

      - name: Create source tarball
        run: |
          # Create source archive excluding unnecessary files
          tar -czf source-${{ needs.prepare-release.outputs.version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=coverage \
            --exclude=.pnpm-store \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            src/ package.json pnpm-lock.yaml tsconfig.json README.md LICENSE* || true

      - name: Create distribution tarball
        run: |
          tar -czf dist-${{ needs.prepare-release.outputs.version }}.tar.gz dist/

      - name: Create checksums
        run: |
          sha256sum *.tar.gz > checksums-${{ needs.prepare-release.outputs.version }}.txt
          if [ -f release-assets/sbom.cdx.json ]; then
            sha256sum release-assets/sbom.cdx.json >> checksums-${{ needs.prepare-release.outputs.version }}.txt
          fi
          cat checksums-${{ needs.prepare-release.outputs.version }}.txt

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            source-*.tar.gz
            dist-*.tar.gz
            checksums-*.txt
          fail_on_unmatched_files: false

  # Send notifications about distribution status
  notify-status:
    name: Distribution Status
    runs-on: ubuntu-latest
    needs:
      [prepare-release, npm-distribution, docker-distribution, docs-distribution, release-artifacts]
    if: always()
    steps:
      - name: Create status summary
        run: |
          echo "# 📦 Release Distribution Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Distribution Channels" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Channel | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 NPM | ${{ needs.npm-distribution.result == 'success' && '✅ Published' || needs.npm-distribution.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.npm-distribution.result == 'skipped' && 'NPM_TOKEN not configured' || needs.npm-distribution.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker | ${{ needs.docker-distribution.result == 'success' && '✅ Published' || needs.docker-distribution.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.docker-distribution.result == 'skipped' && 'ENABLE_DOCKER_RELEASE not set' || needs.docker-distribution.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📚 Docs | ${{ needs.docs-distribution.result == 'success' && '✅ Deployed' || needs.docs-distribution.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.docs-distribution.result == 'skipped' && 'ENABLE_DOCS_RELEASE not set' || needs.docs-distribution.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📎 Artifacts | ${{ needs.release-artifacts.result == 'success' && '✅ Uploaded' || '❌ Failed' }} | Tarballs and checksums |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](${{ github.event.release.html_url }})" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.npm-distribution.result }}" = "success" ]; then
            echo "- [NPM Package](https://www.npmjs.com/package/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.docker-distribution.result }}" = "success" ]; then
            echo "- [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.docs-distribution.result }}" = "success" ]; then
            echo "- [Documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          fi

      # Optional: Send Slack notification
      - name: Slack Notification
        if: secrets.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Release ${{ github.event.release.tag_name }} Distribution Complete",
              attachments: [{
                color: "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                fields: [
                  { title: "NPM", value: "${{ needs.npm-distribution.result }}", short: true },
                  { title: "Docker", value: "${{ needs.docker-distribution.result }}", short: true },
                  { title: "Docs", value: "${{ needs.docs-distribution.result }}", short: true },
                  { title: "Release", value: "${{ github.event.release.html_url }}", short: false }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
