name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

# Note: For this workflow to create PRs, you must enable "Allow GitHub Actions
# to create and approve pull requests" in Settings > Actions > General
permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release:publish
          version: pnpm changeset version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          # Creates GitHub releases automatically with changelog content (only works if package is published)
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN is optional - publishing will be skipped if not set
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || '' }}

      # Conditional NPM Publishing (only if NPM_TOKEN is set)
      - name: Check NPM Publishing
        if: steps.changesets.outputs.published == 'true'
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "âœ… NPM publishing completed (NPM_TOKEN was configured)"
          else
            echo "ðŸ“¦ NPM publishing skipped - NPM_TOKEN not configured"
            echo "To enable NPM publishing, add NPM_TOKEN to repository secrets"
          fi

      # Generate SBOM and attestations after publish
      - name: Generate SBOM
        if: steps.changesets.outputs.published == 'true'
        run: pnpm sbom

      - name: Build for attestations
        if: steps.changesets.outputs.published == 'true'
        run: pnpm build

      - name: Attest build provenance
        if: steps.changesets.outputs.published == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/**'

      - name: Attest SBOM
        if: steps.changesets.outputs.published == 'true'
        uses: actions/attest-sbom@v2
        with:
          subject-path: 'dist/**'
          sbom-path: 'sbom.cdx.json'

      # Attach SBOM to GitHub Release
      - name: Attach SBOM to Release
        if: steps.changesets.outputs.published == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: sbom.cdx.json
          asset_name: sbom.cdx.json
          tag: v${{ fromJson(steps.changesets.outputs.publishedPackages)[0].version }}
          overwrite: true

      # For private packages: Create tag when version changes are detected
      - name: Check for Version Changes
        id: version_check
        run: |
          # Check if this is a merge of a version PR (contains version update commit)
          if git log -1 --pretty=%B | grep -q "chore: version packages"; then
            # Extract version from package.json
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version change detected: v$VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

      - name: Create Git Tag for Private Package
        if: steps.version_check.outputs.changed == 'true'
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
