name: Reusable Build and Test

on:
  workflow_call:
    outputs:
      artifact-id:
        description: 'Unique identifier for build artifacts'
        value: ${{ jobs.build.outputs.artifact-id }}
      version:
        description: 'Package version from package.json'
        value: ${{ jobs.build.outputs.version }}
      sbom-artifact-id:
        description: 'SBOM artifact identifier'
        value: ${{ jobs.build.outputs.sbom-artifact-id }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
      attestations: write
    outputs:
      artifact-id: ${{ steps.artifact-id.outputs.id }}
      sbom-artifact-id: ${{ steps.artifact-id.outputs.sbom-id }}
      version: ${{ steps.package.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        timeout-minutes: 5

      # Run all checks
      - name: Audit dependencies
        run: pnpm audit --audit-level critical

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format

      - name: Test with coverage
        run: pnpm test:coverage

      # Build and generate artifacts
      - name: Build
        run: pnpm build

      - name: Generate SBOM
        run: pnpm sbom

      # Extract version for downstream jobs
      - name: Get package version
        id: package
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Generate unique artifact IDs
      - name: Generate artifact IDs
        id: artifact-id
        run: |
          echo "id=build-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
          echo "sbom-id=sbom-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      # Create attestations
      - name: Attest build provenance (SLSA)
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/**'

      - name: Attest SBOM
        uses: actions/attest-sbom@v2
        with:
          subject-path: 'dist/**'
          sbom-path: 'sbom.cdx.json'

      # Upload build artifacts with unique ID
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-id.outputs.id }}
          path: |
            dist/
            package.json
            pnpm-lock.yaml
          retention-days: 90
          if-no-files-found: error

      # Upload SBOM separately for easier access
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-id.outputs.sbom-id }}
          path: sbom.cdx.json
          retention-days: 90
          if-no-files-found: error

      # Create manifest for artifact tracking
      - name: Create artifact manifest
        run: |
          cat > artifact-manifest.json << EOF
          {
            "version": "${{ steps.package.outputs.version }}",
            "build_id": "${{ github.run_id }}",
            "build_number": "${{ github.run_number }}",
            "artifact_id": "${{ steps.artifact-id.outputs.id }}",
            "sbom_artifact_id": "${{ steps.artifact-id.outputs.sbom-id }}",
            "commit": "${{ github.sha }}",
            "ref": "${{ github.ref }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ github.run_id }}-${{ github.run_attempt }}
          path: artifact-manifest.json
          retention-days: 90
