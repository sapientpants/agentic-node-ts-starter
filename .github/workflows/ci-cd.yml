name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  attestations: write
  id-token: write
  security-events: write
  pull-requests: read

jobs:
  # Always run: Build, test, and create artifacts
  build-test:
    name: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    outputs:
      version: ${{ steps.package.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run all checks
      - run: pnpm audit --audit-level critical
      - run: pnpm typecheck
      - run: pnpm lint
      - run: pnpm format
      - run: pnpm test:coverage

      # Build and generate artifacts
      - name: Build
        run: pnpm build

      - name: Generate SBOM
        run: pnpm sbom

      # Create attestations
      - name: Attest build provenance (SLSA)
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/**'

      - name: Attest SBOM
        uses: actions/attest-sbom@v2
        with:
          subject-path: 'dist/**'
          sbom-path: 'sbom.cdx.json'

      # Upload artifacts for release job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.cdx.json
          retention-days: 30

      # Extract version for release job
      - name: Get package version
        id: package
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  # PR only: Validate changeset
  changeset-validation:
    name: changeset-validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changeset
        run: |
          if pnpm changeset status --since=origin/main 2>&1 | grep -q "No changesets present"; then
            echo "❌ Error: This PR does not include a changeset."
            echo ""
            echo "Every PR must include a changeset to document the changes."
            echo ""
            echo "To add a changeset:"
            echo "  - For user-facing changes: run 'pnpm changeset'"
            echo "  - For internal changes (CI, tests, refactoring): run 'pnpm changeset --empty'"
            echo ""
            echo "Learn more about changesets in CONTRIBUTING.md"
            exit 1
          else
            echo "✅ Changeset found"
          fi

  # Security scans
  osv-scan:
    permissions:
      security-events: write
      contents: read
      actions: read
    uses: 'google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@v2.2.1'

  codeql:
    permissions:
      security-events: write
      contents: read
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Main branch only: Handle releases
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-test, osv-scan, codeql]
    # Note: changeset-validation only runs on PRs, not on main branch pushes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      issues: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # Download artifacts from build-test job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom

      # Create Release PR only (no publishing)
      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          # Do not publish here - handled by release.yml workflow
          version: pnpm changeset version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check for version changes (for private packages)
      - name: Check for Version Changes
        id: version_check
        run: |
          if git log -1 --pretty=%B | grep -q "chore: version packages"; then
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version change detected: v$VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

      # Create tag and release for version changes
      - name: Create Git Tag
        if: steps.version_check.outputs.changed == 'true'
        id: create_tag
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      # Create GitHub Release with artifacts
      - name: Create GitHub Release
        if: steps.version_check.outputs.changed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.create_tag.outputs.tag }}
          name: Release ${{ steps.create_tag.outputs.tag }}
          body: |
            ## Release ${{ steps.create_tag.outputs.tag }}

            See the [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

            ### Artifacts
            - 📦 SBOM (CycloneDX format) attached below
            - ✅ Build provenance attestation available
            - ✅ SBOM attestation available

            ### Distribution
            Package distribution is handled by the release.yml workflow.
            To enable npm publishing, Docker builds, or documentation deployment,
            see the Release Distribution Setup section in README.md.
          artifacts: sbom.cdx.json
          makeLatest: true
