name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# Cancel in-progress runs for PRs, but not for main branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  PNPM_VERSION: 10.0.0
  NODE_VERSION: 22

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write
  security-events: write

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run all checks in parallel
      - name: Run quality checks
        run: |
          pnpm audit --audit-level critical &
          pnpm typecheck &
          pnpm lint &
          pnpm format &
          wait
          echo "‚úÖ All quality checks passed"

      - name: Test with coverage
        run: pnpm test:coverage

      - name: Initialize CodeQL
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Run CodeQL Analysis
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: github/codeql-action/analyze@v3

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage/
          retention-days: 7

  release:
    name: Release
    needs: [validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check or generate changeset
        id: changeset
        run: |
          # Check for existing changesets
          if [ -d ".changeset" ] && ls .changeset/*.md 2>/dev/null | grep -v README.md > /dev/null; then
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            echo "üì¶ Found existing changeset"
          else
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            echo "üìù No changeset found, will check commits"
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMIT_RANGE="HEAD"
            else
              COMMIT_RANGE="$LAST_TAG..HEAD"
            fi
            
            # Check if there are any feat/fix commits
            if git log $COMMIT_RANGE --pretty=format:"%s" | grep -E "^(feat|fix|perf|refactor)(\(.+\))?:" > /dev/null; then
              echo "üéØ Found conventional commits, generating changeset"
              node scripts/generate-changeset.js
              echo "generated_changeset=true" >> $GITHUB_OUTPUT
            else
              echo "‚è≠Ô∏è No releasable commits found"
            fi
          fi

      - name: Version and release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Apply changesets
          pnpm changeset version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")

          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
            # Build before release
            pnpm build
            
            # Generate SBOM
            pnpm sbom
            
            # Commit and tag
            git add -A
            git commit -m "chore(release): v${NEW_VERSION}

            Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            
            # Push changes
            git push origin main --follow-tags
            
            # Extract changelog for this version
            awk -v version="## $NEW_VERSION" '
              $0 ~ version { flag=1; next }
              /^## [0-9]/ && flag { exit }
              flag { print }
            ' CHANGELOG.md > release-notes.md
            
            echo "‚úÖ Released version $NEW_VERSION"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No version change"
          fi

      - name: Create GitHub release
        if: steps.release.outputs.released == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release.outputs.version }}
          name: v${{ steps.release.outputs.version }}
          body_path: release-notes.md
          files: |
            sbom.cdx.json
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate attestations
        if: steps.release.outputs.released == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/**/*.js
            sbom.cdx.json

  publish-npm:
    name: Publish to NPM
    needs: [release]
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.release.outputs.version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          registry-url: 'https://registry.npmjs.org'

      - name: Install and build
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Check NPM token and publish
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚úÖ NPM_TOKEN is configured, publishing to npm"
            # Remove private flag if present
            node -e "
              const fs = require('fs');
              const pkg = require('./package.json');
              if (pkg.private) {
                delete pkg.private;
                fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
              }
            "
            npm publish --provenance --access public
          else
            echo "‚è≠Ô∏è NPM_TOKEN not configured, skipping npm publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
