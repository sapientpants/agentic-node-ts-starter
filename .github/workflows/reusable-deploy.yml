name: Reusable Deploy

on:
  workflow_call:
    inputs:
      version:
        description: 'Version being deployed'
        required: true
        type: string
      environment:
        description: 'Deployment environment (npm, docker, docs)'
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:
  deploy-npm:
    name: Deploy to NPM
    if: inputs.environment == 'npm'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Check NPM Token
        id: check_npm
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
            echo "✅ NPM_TOKEN is configured"
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
            echo "⚠️ NPM_TOKEN is not configured - skipping npm deployment"
          fi

      - name: Download build artifacts
        if: steps.check_npm.outputs.has_token == 'true'
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .

      - name: Install pnpm
        if: steps.check_npm.outputs.has_token == 'true'
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js for npm
        if: steps.check_npm.outputs.has_token == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Check package configuration
        if: steps.check_npm.outputs.has_token == 'true'
        id: check_config
        run: |
          IS_PRIVATE=$(node -p "require('./package.json').private || false")
          PACKAGE_NAME=$(node -p "require('./package.json').name")

          echo "is_private=$IS_PRIVATE" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          if [ "$IS_PRIVATE" = "true" ]; then
            echo "⚠️ Package is marked as private. Will modify for publishing."
          fi

          echo "📦 Deploying: $PACKAGE_NAME@${{ inputs.version }}"

      - name: Configure package for publishing
        if: steps.check_npm.outputs.has_token == 'true' && steps.check_config.outputs.is_private == 'true'
        run: |
          # Remove private flag for publishing
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            delete pkg.private;
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish to npm with provenance
        if: steps.check_npm.outputs.has_token == 'true'
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm publication
        if: steps.check_npm.outputs.has_token == 'true'
        run: |
          echo "Waiting for npm to propagate..."
          sleep 10
          npm view ${{ steps.check_config.outputs.package_name }}@${{ inputs.version }}
          echo "✅ Successfully published to npm"

  deploy-docker:
    name: Deploy Docker Images
    if: inputs.environment == 'docker' && vars.ENABLE_DOCKER_RELEASE == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code for Dockerfile
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: env.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, github.event.repository.name) || '' }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-docs:
    name: Deploy Documentation
    if: inputs.environment == 'docs' && vars.ENABLE_DOCS_RELEASE == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build documentation
        run: |
          # Check if there's a docs:build script
          if npm run | grep -q "docs:build"; then
            echo "Running docs:build script"
            pnpm run docs:build
          else
            echo "No docs:build script found, generating with TypeDoc"
            pnpm dlx typedoc --out docs/api dist/index.js \
              --name "${{ github.event.repository.name }}" \
              --includeVersion
          fi

          # Create index.html if it doesn't exist
          if [ ! -f docs/index.html ]; then
            echo "Creating default index.html"
            cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>${{ github.event.repository.name }} Documentation</title>
              <meta http-equiv="refresh" content="0; url=./api/index.html">
          </head>
          <body>
              <p>Redirecting to <a href="./api/index.html">API Documentation</a>...</p>
          </body>
          </html>
          EOF
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
